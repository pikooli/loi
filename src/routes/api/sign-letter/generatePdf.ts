import { PUBLIC_DOMAIN_NAME } from '$env/static/public';
import { jsPDF } from 'jspdf';
import fs from 'fs'; 
import path from 'path'; 

const GENERATE_LOCAL = false;

const LINE_HEIGHT = 10;
const PAGE_HEIGHT = 290;
const MARGIN_LEFT = 20;
const PAGE_WIDTH = 180;

interface IncrementLineArgs {
	doc: jsPDF;
	yPosition: number;
	nb?: number;
}

export const incrementLine = ({ doc, yPosition, nb = 1 }: IncrementLineArgs) => {
	if (yPosition + LINE_HEIGHT > PAGE_HEIGHT) {
		doc.addPage();
		return LINE_HEIGHT;
	}
	return yPosition + LINE_HEIGHT * nb;
};


interface GeneratePdfArgs {
	projectName: string;
	projectDescription: string;
	commitmentText: string;
	signer: { firstName: string; lastName: string; email: string };
	contactEmail: string;
	projectUrl?: string;
}

export function generatePdf({
	projectName,
	projectDescription,
	commitmentText,
	signer,
	contactEmail,
	projectUrl
}: GeneratePdfArgs) {
	const doc = new jsPDF();

	doc.setFontSize(18);
	doc.text('Letter of Intent', MARGIN_LEFT, LINE_HEIGHT);

	doc.setFontSize(12);
	doc.text(`Project Name: ${projectName}`, MARGIN_LEFT, LINE_HEIGHT * 3);
	doc.text(`Contact Email: ${contactEmail}`, MARGIN_LEFT, LINE_HEIGHT * 4);

	if (projectUrl) {
		doc.text(`Project URL: ${projectUrl}`, MARGIN_LEFT, LINE_HEIGHT * 5);
	}

	let startY = projectUrl ? LINE_HEIGHT * 6 : LINE_HEIGHT * 5;

    
	doc.text(`Project Description:`, MARGIN_LEFT, startY);
    startY = incrementLine({ doc, yPosition: startY });
	const projectDescriptionLines = doc.splitTextToSize(projectDescription, PAGE_WIDTH);
	doc.text(projectDescriptionLines, MARGIN_LEFT, startY);
	startY = incrementLine({ doc, yPosition: startY, nb: projectDescriptionLines.length });

    
	doc.text(`Commitment Text:`, MARGIN_LEFT, startY);
    startY = incrementLine({ doc, yPosition: startY });
	const commitmentTextLines = doc.splitTextToSize(commitmentText, PAGE_WIDTH);
	doc.text(commitmentTextLines, MARGIN_LEFT, startY);
	startY = incrementLine({ doc, yPosition: startY, nb: commitmentTextLines.length }); 


	const currentDate = new Date().toLocaleDateString();
	doc.text(`Signed the ${currentDate} by: `, MARGIN_LEFT, startY);
    startY = incrementLine({ doc, yPosition: startY });
	doc.text(`${signer.firstName} ${signer.lastName}`, MARGIN_LEFT, startY);
    startY = incrementLine({ doc, yPosition: startY });
	doc.text(`${signer.email}`, MARGIN_LEFT, startY);
	startY = incrementLine({ doc, yPosition: startY , nb: 2});


	doc.setFontSize(10);
	doc.setTextColor(150);
	doc.text('------------------------------------------', MARGIN_LEFT, startY);
    startY = incrementLine({ doc, yPosition: startY });
	doc.text('DISCLAIMER:', MARGIN_LEFT, startY);
    startY = incrementLine({ doc, yPosition: startY });
	doc.text(
		`This Letter of Intent (LOI) is not legally binding and does not constitute a contract.`,
		MARGIN_LEFT,
		startY 
	);
    startY = incrementLine({ doc, yPosition: startY });
	doc.text(
		`It is a preliminary document expressing your interest and intention without creating any legal obligations.`,
		MARGIN_LEFT,
		startY 
	);
    startY = incrementLine({ doc, yPosition: startY });

	doc.setFontSize(10);
	doc.setTextColor(100);
	doc.text(`Generated by ${PUBLIC_DOMAIN_NAME}`, MARGIN_LEFT, 290);

	const pdfOutput = doc.output('arraybuffer');

	//  ==============================
	if (GENERATE_LOCAL) {
		const filePath = path.join('generated_pdfs', `${projectName}_Letter_of_Intent.pdf`);
		fs.writeFileSync(filePath, Buffer.from(pdfOutput));
	}

	return Buffer.from(pdfOutput);
}
