import { PUBLIC_DOMAIN_NAME } from '$env/static/public';
import { jsPDF } from 'jspdf';
import fs from 'fs';
import path from 'path';

const GENERATE_LOCAL = false;

const START_LINE = 20;
const LINE_HEIGHT = 10;
const PAGE_HEIGHT = 280;
const FOOTER_HEIGHT = 290;
const MARGIN_LEFT = 20;
const PAGE_WIDTH = 180;

interface IncrementLineArgs {
	doc: jsPDF;
	yPosition: number;
	nb?: number;
	lineHeight?: number;
}

const addFooter = ({ doc }: { doc: jsPDF }) => {
	const oldFontSize = doc.getFontSize();
	doc.setFontSize(10);
	doc.setTextColor(100);
	doc.text(`Generated by ${PUBLIC_DOMAIN_NAME}`, MARGIN_LEFT, FOOTER_HEIGHT);
	doc.setFontSize(oldFontSize);
	doc.setTextColor(0);
}

const incrementLine = ({ doc, yPosition, nb = 1, lineHeight = LINE_HEIGHT }: IncrementLineArgs) => {
	if (yPosition + lineHeight * nb > PAGE_HEIGHT) {
		addFooter({ doc });
		doc.addPage();
		return START_LINE;
	}

	return yPosition + lineHeight * nb;
};

const addText = ({ doc, yPosition, text }: { doc: jsPDF; yPosition: number; text: string }): number => {
	const textLines = doc.splitTextToSize(text.trim(), PAGE_WIDTH);

	if (textLines.length > 1) {
		textLines.forEach((textLine: string) => {
			doc.text(textLine, MARGIN_LEFT, yPosition);
			yPosition= incrementLine({ doc, yPosition, lineHeight: LINE_HEIGHT / 2 });	
		})
		return yPosition;
	}
	doc.text(textLines, MARGIN_LEFT, yPosition);
	return incrementLine({ doc, yPosition });	
};

interface GeneratePdfArgs {
	projectName: string;
	projectDescription: string;
	commitmentText: string;
	signer: { firstName: string; lastName: string; email: string };
	contactEmail: string;
	projectUrl?: string;
}

export function generatePdf({
	projectName,
	projectDescription,
	commitmentText,
	signer,
	contactEmail,
	projectUrl
}: GeneratePdfArgs) {
	const doc = new jsPDF()

	doc.setFontSize(18);
	let startY = addText({ doc, yPosition: START_LINE, text: 'Letter of Intent' });

	doc.setFontSize(12);
	startY = addText({ doc, yPosition: startY, text: `Project Name: ${projectName.trim()}` });
	startY = addText({ doc, yPosition: startY, text: `Contact Email: ${contactEmail.trim()}` });

	if (projectUrl) {
		startY = addText({ doc, yPosition: startY, text: `Project URL: ${projectUrl.trim()}` });
	}

	startY = addText({
		doc,
		yPosition: startY,
		text: `Project Description:`
	});
	startY = addText({
		doc,
		yPosition: startY,
		text: projectDescription.trim() 
	});
	
	startY = incrementLine({ doc, yPosition: startY});

	startY = addText({
		doc,
		yPosition: startY,
		text: `Commitment Text:`
	});
	startY = addText({
		doc,
		yPosition: startY,
		text: commitmentText.trim()
	});

	startY = incrementLine({ doc, yPosition: startY});
	const currentDate = new Date().toLocaleDateString();
	startY = addText({ doc, yPosition: startY, text: `Signed the ${currentDate} by: ` });
	startY = addText({ doc, yPosition: startY, text: `${signer.firstName.trim()} ${signer.lastName.trim()}` });
	startY = addText({ doc, yPosition: startY, text: `${signer.email.trim()}` });
	startY = incrementLine({ doc, yPosition: startY});

	doc.setFontSize(10);
	doc.setTextColor(150);
	startY = addText({ doc, yPosition: startY, text: '------------------------------------------' });
	startY = addText({
		doc,
		yPosition: startY,
		text: `This Letter of Intent (LOI) is not legally binding and does not constitute a contract.`
	});

	addText({
		doc,
		yPosition: startY,
		text: `It is a preliminary document expressing your interest and intention without creating any legal obligations.`
	});


	addFooter({ doc });

	const pdfOutput = doc.output('arraybuffer');

	//  ==============================
	if (GENERATE_LOCAL) {
		const filePath = path.join('generated_pdfs', `${projectName.trim()}_Letter_of_Intent.pdf`);
		fs.writeFileSync(filePath, Buffer.from(pdfOutput));
	}

	return Buffer.from(pdfOutput);
}
